---
title: "Data Visualisation in R"
format:
  html:
    toc: true
    toc-location: left
---

# Visualisation

Lets make some data as we did in the introduction

```{r}
#install.packages("tidyverse") 
library(tidyverse)

Year <- seq(from=1950,to=2023,by=1)
Treatment <- c("Control","Treatment 1","Treatment 2")
Rep<- seq(from=1,to=10,by=1)

df<-expand.grid(Year=Year,Treatment=Treatment,Rep=Rep)

Response<-rnorm(n=nrow(df),mean = 15,sd=8) 

df$Response<-Response

```


## Base

We can check the data we have using a base plot function

The base plot() function will create a grid that is each column of the data set plotted against all the others, this is fine for continuous data (Such as bill_depth_mm)

but it is hard to understand or read fully.

```{r}
plot(df)
```

We can define x and y axes from columns of the data set 

```{r}
plot(x=df$Year,y=df$Response)
```

It automatically does a scatter plot, maybe we want to colour different treatments differently? and perhaps some axis labels that are more clear?


```{r}
plot(x=df$Year,y=df$Response,col=df$Treatment, xlab="Year",ylab="Response")
```

Some of the arguments in this function are well named but you need to know the names of the arguments to properly use a function best,

you can easily find documentation of what arguments are within a function by typing two ? before the function in the console like so:

```{r}

??plot()

# plot is a common function name so we have to go to the base::plot() section of the help

```

With the points coloured we should add a legend to the plot, this is accomplished with another function run after the plot function

```{r}

plot(x=df$Year,y=df$Response,col=unique(df$Treatment), xlab="Year",ylab="Response",pch=19)
legend(x = "topright",          # Position
       legend = unique(df$Treatment),  # Legend texts
       col = c(1,2, 3),           # point colors
       pch=19)                    # point type

```

Here we can see that the response is totally random, regardless of treatment and year

For interesting plotting we can change this 

For manipulation we can use something called pipes %>% which push the output from one line into the function on the next line

we can change the values of response by the values of year and treatment using the case_when function to create clauses similar to if else statements

The mutate function can be used to create new columns based on current columns or other values/objects

These two lines do the same, but one uses a pipe (%>%) and one doesn't. For a simple example there is little to no difference,

but when using multiple functions in a row piping makes code a lot easier to read and understand what order functions have been carried out in.


```{r}
df_1<-df %>% 
  mutate(Response_updated=case_when(Treatment=="Control"~jitter(Response)*((Year-1930)/5)-50,
                                    Treatment=="Treatment 1"~jitter(Response)*((Year-1930)*-2)+1000,
                                    Treatment=="Treatment 2"~jitter(Response)*((Year-1930)*1.5)-4))



df_1<-mutate(df,
             Response_updated=case_when(Treatment=="Control"~jitter(Response)*((Year-1930)/5)-50,
                                    Treatment=="Treatment 1"~jitter(Response)*((Year-1930)*-2)+1000,
                                    Treatment=="Treatment 2"~jitter(Response)*((Year-1930)*1.5)-4))


```

We can now calculate some summary statistics such as mean or standard deviation using group_by and summarise

The group_by function means that all unique values in the Treatment column are used 

```{r}
df_1_summary<-df_1 %>% 
  group_by(Treatment) %>% 
  summarise(MeanResponse=mean(Response_updated),
            SDResponse=sd(Response_updated))

df_1_summary

df_1_summary_year<-df_1 %>% 
  group_by(Treatment,Year) %>% 
  summarise(MeanResponse=mean(Response_updated),
            SDResponse=sd(Response_updated))

df_1_summary_year
```

## ggplot2

Now lets try and plot these data, for more complex plots ggplot2 is by far the best package

we first make a blank ggplot saying what data we will include

then we want to add layers to the plot for what we want to plot and how we want it to look

for elements of the plot that change with data from the df we use the aes() function to show what column we want to map to what element (mapping=aes())

```{r}
ggplot(data=df_1)+
  geom_point(mapping=aes(x=Year,y=Response_updated,colour=Treatment))

```

This looks good but could be Nicer there are many geom types to dictate the type of plot

different geom types have different required aesthetic elements, we could check by using ??geom_point for example

generally we use, x, y, colour, fill and alpha (transparency)

unlike base plotting ggplot creates a legend automatically, this becomes more complex as the plot becomes more complex but is generally a nice default

```{r}
ggplot(df_1)+
  geom_density(aes(x=Response_updated,colour=Treatment))

ggplot(df_1)+
  geom_col(aes(x=Year,y=Response_updated,fill=Treatment),alpha=0.5)

ggplot(df_1)+
  geom_boxplot(aes(x=Treatment,y=Response_updated,fill=Treatment),alpha=0.5)

```

We can also add new data into the same plot so we could use the summary data too, for this we add the data to the geom we want it used for

```{r}
ggplot()+
  geom_point(data=df_1,mapping=aes(x=Year,y=Response_updated,colour=Treatment),
             alpha=0.4)+
  geom_ribbon(data=df_1_summary_year,mapping=aes(x=Year,ymax=MeanResponse+SDResponse,
                                                 ymin=MeanResponse-SDResponse,fill=Treatment),
              alpha=0.4)+
  geom_line(data=df_1_summary_year,mapping=aes(x=Year,y=MeanResponse,colour=Treatment))
```

We can now change the style and appearance, theme() is used to change appearances

there are also some preset theme functions like theme_classic() or theme_bw()

we can also define the colours or fill we want using the scale_colour_manual() and scale_fill_manual() functions



```{r}
ggplot()+
  geom_point(data=df_1,mapping=aes(x=Year,y=Response_updated,colour=Treatment),
             alpha=0.4)+
  geom_ribbon(data=df_1_summary_year,mapping=aes(x=Year,ymax=MeanResponse+SDResponse,
                                                 ymin=MeanResponse-SDResponse,fill=Treatment),
              alpha=0.4)+
  geom_line(data=df_1_summary_year,mapping=aes(x=Year,y=MeanResponse,colour=Treatment))+
  scale_colour_manual(values=c("darkcyan","darkorange","grey30"))+
  scale_fill_manual(values=c("darkcyan","darkorange","grey30"))+
  labs(x="Year",y="Response Variable")+
  theme_classic()
```

We could even separate plots by another column (facetting)

```{r}
ggplot()+
  geom_point(data=df_1,mapping=aes(x=Year,y=Response_updated,colour=Treatment),
             alpha=0.4)+
  geom_ribbon(data=df_1_summary_year,mapping=aes(x=Year,ymax=MeanResponse+SDResponse,
                                                 ymin=MeanResponse-SDResponse,fill=Treatment),
              alpha=0.4)+
  geom_line(data=df_1_summary_year,mapping=aes(x=Year,y=MeanResponse,colour=Treatment))+
  facet_wrap(~Rep, nrow=2)+
  scale_color_manual(values=c("darkcyan","darkorange","grey30"))+
  scale_fill_manual(values=c("darkcyan","darkorange","grey30"))+
  labs(x="Year",y="Response Variable")+
  theme_classic()
```

Once we have got a plot to how we want it we can then save it as a file on our computer using the ggsave() function

to do this we can save our plot as an object, then provide the location we want to save the file and its name and extension in quotations, and its size,

we will save to the current directory.

```{r}
Plot_To_Save<-ggplot()+
  geom_point(data=df_1,mapping=aes(x=Year,y=Response_updated,colour=Treatment),
             alpha=0.4)+
  geom_ribbon(data=df_1_summary_year,mapping=aes(x=Year,ymax=MeanResponse+SDResponse,
                                                 ymin=MeanResponse-SDResponse,fill=Treatment),
              alpha=0.4)+
  geom_line(data=df_1_summary_year,mapping=aes(x=Year,y=MeanResponse,colour=Treatment))+
  facet_wrap(~Rep, nrow=2)+
  scale_color_manual(values=c("darkcyan","darkorange","grey30"))+
  scale_fill_manual(values=c("darkcyan","darkorange","grey30"))+
  labs(x="Year",y="Response Variable")+
  theme_classic()

ggsave("This_Is_Our_First_Saved_Plot.png", Plot_To_Save, width=10, height=10) # dont forget to put the file type at the end we will use .png

```




