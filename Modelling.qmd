---
title: "Modelling in R"
format: html
---

Packages often have their own example datasets within them, or a package can be used to store just data without functions etc.

We will look at the palmer penguins dataset

# Real World Data

```{r}
#install.packages("palmerpenguins")

library(palmerpenguins)
data(penguins)
```

This becomes a 'promise' of a data set, we have to do something with it to get it properly, lets take a look inside

```{r}

library(dplyr)
glimpse(penguins)

```

This gives us two datasets in our global environment

Lets plot some of the data to see how they are related before we use more formal analyses

```{r}

plot(penguins)

```

The base plot() function will create a grid that is each column of the data set is plotted against all the others, this is fine for continuous data (Such as bill_depth_mm)

but it isn't great for the categorical data (what does species= 1 mean??)

lets use ggplot2 again to make some nicer plots

ggplot starts with an empty ggplot() call that creates a blank sheet and we then layer on our information using the + symbol

```{r}
library(ggplot2)

ggplot(data=penguins)+
  geom_point(aes(x=bill_length_mm,y=body_mass_g))

```

This creates a simple scatter plot (note the error about missing values, these are NA values and we will deal with this later)

We can maybe try colour our points based on their sex or species or island

```{r}

ggplot(data=penguins)+
  geom_point(aes(x=bill_length_mm,y=body_mass_g, colour=sex))

```


Some of these points do seem to be in clusters, maybe there are differences between species

```{r}

ggplot(data=penguins)+
  geom_point(aes(x=bill_length_mm,y=body_mass_g, colour=sex, shape=species))

```

this is a bit clearer, but maybe we want to show each species as a separate panel (or sometimes called facet)

```{r}

ggplot(data=penguins)+
  geom_point(aes(x=bill_length_mm,y=body_mass_g, colour=sex, shape=species))+
  facet_wrap(~species)

```

We can even split further into a grid of species and islands

```{r}

ggplot(data=penguins)+
  geom_point(aes(x=bill_length_mm,y=body_mass_g, colour=sex, shape=species))+
  facet_grid(island~species)

```


lets look at some of the other data in the dataset

```{r}

ggplot(data=penguins)+
  geom_point(aes(x=species,y=flipper_length_mm, colour=sex))

```

seems like a scatter plot isnt the best type of plot when one of our axes is categorical, 

lets try a boxplot

```{r}

ggplot(data=penguins)+
  geom_boxplot(aes(x=species,y=flipper_length_mm, colour=sex))

```

We can see from this plot that there are clear differences by species and by sex of flipper length,

lets model that difference and see if the difference is significant,

As we are going to make simple models here we will clean the data to make our lives easier, this will mean removing NA values.
Removing NA's would normally be something I would not recommend, we (or someone) has worked extremely hard to create this data, 
so we shouldn't ever remove data, but NA replacement is complicated and not the subject for now.

Using summary() we can see which columns have NAs and which don't.

```{r}
summary(penguins)
```

Through going into the object and ordering one of the columns we find that the NA's (which order to last always) are the same rows
So we only have to remove two rows to remove the NAs in the biometrics columns, there are more NA's in the sex column
if we want to remove NA's there are many ways, to be selective we can filter our dataset 

To subset data we can use the filter() function from the dplyr package, we create a logic clause that then filters the dataset by that clause/statement,

for example if we want to select all rows of the data set where the data is from a female penguin we can do this by

```{r}

female_penguins<- penguins %>% 
  filter(sex=="female")


female_penguins

```

or we might want all the penguins above 5 kg

```{r}

heavier_penguins<- penguins %>% 
  filter(body_mass_g>= 5000)


heavier_penguins


```

there are a range of symbols we can use such as more than >, less than <, more than or equal to >=, less than or equal to <=, is equal to == 

we can even use multiple clauses or statements in one call to filter, 

so if we want all the heavier female penguins 

```{r}

heavier_female_penguins<- penguins %>% 
  filter(body_mass_g>= 5000 & sex=="female")


heavier_female_penguins


```

sometimes we might want to filter with multiple answers of a categorical variable, 

for example if we wanted all penguins from Biscoe and Torgersen island

to do this we can make a vector of the names we want, then filter by that vector 


```{r}

Islands_we_Want<-c("Biscoe","Torgersen")

Biscoe_Torgersen_penguins<- penguins %>% 
  filter(island%in%Islands_we_Want)

Biscoe_Torgersen_penguins


```

Here we will make use of ! this means the opposite of the clause (not this)

We also use %in% which is used to tell filter there are more than one element

or NAs that we want to get rid of as NA is not classed like normal data

```{r}
penguins_someNAs<-penguins %>% 
  filter(!body_mass_g%in%NA)
```

If we now look at the number of rows of the datasets we can see only two rows were removed. (not all the NAs)

```{r}
nrow(penguins)
nrow(penguins_someNAs)

summary(penguins_someNAs)
```

Still 9 NAs in sex

```{r}
penguins_noNAs<-penguins_someNAs %>% 
  filter(!sex%in%NA)

summary(penguins_noNAs)
```

All sorted

# Modelling Categorical Factors

So now we will try prove the obvious

Does the flipper length of penguins change between species and between sexes

Whether we use an interaction or not depends on if our scientific thought 

believes the relationship of Species to flipper length is different between sexes (sexual dimorphism may not be consistent across species)


```{r}
#| fig.width: 8
#| fig.height: 8

lm2.1<-lm(flipper_length_mm~species*sex,data=penguins_noNAs)

```

We could apply a linear model to almost all data but often it will not meet our assumptions,

This isn't a statistics course so I won't go into full detail on theory and reasons when to and when not to use certain models,

We will just apply some models that may or may not be correct to see how easy it is to apply such models in R, 

To assess the assumptions of our models we can look at the residual distance between the model line and the points

These are called the residuals of the model


Here is a visualisation of what residuals are, 

If we run this code we can see points (raw data in grey) and the distances (residuals in red) from the line (model in blue). 

Then the plot of those residuals against the fitted values (or our response variable) can show how the sizes of residuals change across the fitted values

Ideally we want this to represent a cloud of points with no clear patterns across the range of the fitted values, this is very subjective but a useful qualitative assessment of how good our model is.

```{r}

n=50

a=2

b=2

xGaus=seq(1,10,length.out=n)

yGaus=a+b*xGaus

o=10

uGaus=rnorm(n,mean = yGaus,sd=o)

ResidualsExample_df<-data.frame(y=yGaus,u=uGaus,x=xGaus)


ggplot(data=ResidualsExample_df)+
  geom_line(aes(x=x,y=y),linewidth=2,colour="darkcyan",alpha=0.7)+ # Example model
  geom_segment(aes(x=x,xend=x,y=y,yend=u),colour="red")+ # display residuals from raw data to the model
  geom_point(aes(x=x,y=u),size=2,colour="grey50")+ # raw data
    labs(y="Response Variable (Fitted Values)",x="Predictor") +
  theme_classic()
  

ResidualsExample_df%>% 
  mutate(Residuals=(u-y)/sqrt(y))%>% 
  ggplot()+
  geom_point(aes(x=y,y=Residuals),colour="red",alpha=0.7)+
    labs(x="Fitted Values",y="Residuals")+
  theme_classic()

```

We can now check visually the residuals from our model

The Residuals vs Fitted data plot we want the data be evenly spread from right to left, meaning the difference between the model and the data (residuals) are not generally larger or smaller at higher values of the model.

The next important plot is the qq plot, this is best if the points follow line of x=y which is the dotted line behind the points

The next two plots are less important generally but can be used to find out what is wrong if the first two plots are not as we want them

```{r}
plot(lm2.1)
```

This is annoying as we have to press enter in the console to see all the plots

We will install some packages from the easystats ecosystem of packages for this. There are other packages we could also use for this (including one of my own) but the performance package is good

It displays the plots all together and gives hints of what you should look for in each plot

```{r}
#| fig.width: 8
#| fig.height: 8

#install.packages("performance")
library(performance)

check_model(lm2.1)
```


As we only have factors in our model we don't see a 'cloud' of points, but the line is still flat and horizontal so this is good

As the diagnostics are good we can look at the results

```{r}
summary(lm2.1)
```

Okay there are a lot of numbers here but what does it actually mean,

I find the best way to interpret a model output is to plot the model results 

First lets replot the raw data, boxplots are probably the best for categorical factors

We can re-use some of our code from the intro for appearance and colours

```{r}
#| fig.width: 8
#| fig.height: 8

ggplot(penguins_noNAs)+
  geom_boxplot(aes(x=species,y=flipper_length_mm,fill=sex))+
  scale_fill_manual(values=c("darkcyan","darkorange"))+
  labs(x="Sex",y="Response Variable (Flipper Length (mm))")+
  theme_classic()
```

Now we can also see what the model believes about our data 

This should be similar to our raw data but not identical

To do this we make simulated raw data with this same predictor variables in

We then use the model to predict the response variable based on those predictor variables

Therefore, we make a data set with just sex and species the same as our original data (be careful of spelling and capitalisation, R wants it identical)

The model then predicts the average Flipper length in mm based on those species and sexes. 

We can also tell the Predict function to predict error (Standard Error here)


```{r}
#| fig.width: 8
#| fig.height: 8

NewData<-expand.grid(sex=c("female","male"),
                     species=c("Adelie","Chinstrap","Gentoo"))

Pred<-predict(lm2.1,NewData,se.fit=TRUE)

NewData$response<-Pred$fit

NewData$se.fit<-Pred$se.fit


ggplot(NewData)+
  geom_point(aes(x=species,y=response,colour=sex),
             position=position_dodge(0.8))+
  geom_errorbar(aes(x=species,ymax=response+se.fit,
                    ymin=response-se.fit,colour=sex),
                width=0.1,
                position=position_dodge(0.8))+
  scale_colour_manual(values=c("darkcyan","darkorange"))+
  labs(x="Sex",y="Response Variable (Flipper Length (mm))")+
  theme_classic()
```

Lets look at both of these plots next to each other, 

The best way to do this (in my opinion) is using the patchwork package that can combine the plots

First we save both the raw data boxplot as one object and the predicted plot as another then we plot them side by side

```{r}
#| fig.width: 8
#| fig.height: 8
 
#install.packages("patchwork")

library(patchwork)

Plot1<-ggplot(penguins_noNAs)+
  geom_boxplot(aes(x=species,y=flipper_length_mm,fill=sex))+
  scale_fill_manual(values=c("darkcyan","darkorange"))+
  labs(x="Sex",y="Raw Response Variable (Flipper Length (mm))")+
  theme_classic()+
  theme(legend.position = "none")

Plot2<-ggplot(NewData)+
  geom_point(aes(x=species,y=response,colour=sex),
             position=position_dodge(0.8))+
  geom_errorbar(aes(x=species,ymax=response+se.fit,
                    ymin=response-se.fit,colour=sex),
                width=0.1,
                position=position_dodge(0.8))+
  scale_colour_manual(values=c("darkcyan","darkorange"))+
  labs(x="Sex",y="Modelled Response Variable (Flipper Length (mm))")+
  theme_classic()

Plot1+Plot2

```

At first look this is quite good, but maybe some polishing is needed, mostly the y axis range

There are multiple ways to change this for example setting them both to the same range with scale_y_continuous()

```{r}
#| fig.width: 8
#| fig.height: 8
 
#install.packages("patchwork")

library(patchwork)

Plot1<-ggplot(penguins_noNAs)+
  geom_boxplot(aes(x=species,y=flipper_length_mm,fill=sex))+
  scale_fill_manual(values=c("darkcyan","darkorange"))+
  labs(x="Sex",y="Raw Response Variable (Flipper Length (mm))")+
  theme_classic()+
  scale_y_continuous(limits=c(170,240))+
  theme(legend.position = "none")

Plot2<-ggplot(NewData)+
  geom_point(aes(x=species,y=response,colour=sex),
             position=position_dodge(0.8))+
  geom_errorbar(aes(x=species,ymax=response+se.fit,
                    ymin=response-se.fit,colour=sex),
                width=0.1,
                position=position_dodge(0.8))+
  scale_colour_manual(values=c("darkcyan","darkorange"))+
  labs(x="Sex",y="Modelled Response Variable (Flipper Length (mm))")+
    scale_y_continuous(limits=c(170,240))+
  theme_classic()

Plot1+Plot2

```

This is better, although we could actually plot both the modelled and raw data on one plot 

We can use a position=position_jitterdodge() to have the raw data not all in one line above their species

```{r}
#| fig.width: 8
#| fig.height: 8
ggplot(NewData)+
  geom_point(aes(x=species,y=response,colour=sex),
             position=position_dodge(0.8))+
  geom_errorbar(aes(x=species,ymax=response+se.fit,
                    ymin=response-se.fit,colour=sex),
                width=0.1,
                position=position_dodge(0.8))+
  geom_point(data=penguins_noNAs,aes(x=species,
                                      y=flipper_length_mm,
                                      colour=sex),
                position=position_jitterdodge(jitter.width = 0.4,
                                              dodge.width = 0.8),
              alpha=0.3,
             size=0.5)+
  scale_colour_manual(values=c("darkcyan","darkorange"))+
  labs(x="Sex",y="Response Variable (Flipper Length (mm))")+
  theme_classic()
```

# Modelling Continuous Variables

Okay that is what we do with linear models of categorical factors

But what if we want to see the relationship between flipper_length_mm and bill_length_mm

But we know there are species differences and sexual differences in flipper length

As Males always tend to be larger lets just assess species differences in their flipper to bill relationship


Lets plot the raw data first 


```{r}
#| fig.width: 8
#| fig.height: 8

ggplot(penguins_noNAs)+
  geom_point(aes(x=bill_length_mm,y=flipper_length_mm,colour=species))+
  scale_colour_manual(values=c("darkcyan","darkorange","grey30"))+
  labs(x="Bill Length (mm)",y="Flipper Length (mm)")+
  theme_classic()
```

We can see from the raw data that we will expect to find some strong linear relationships

```{r}
#| fig.width: 8
#| fig.height: 8

lm3.1<-lm(flipper_length_mm~species*bill_length_mm,data=penguins_noNAs)

check_model(lm3.1)

summary(lm3.1)
```

As we hypothesised before modelling that there would be different bill to flipper relationships between species

The interaction model follows our scientific assumptions

Therefore, it would be incorrect to use lower complexity models (without the interaction for example)

To predict again we want to create lines for each species

To do this we want to create fake bill length data over the same range for each species

Here we will use the seq() function again that creates a sequence of values from your first number to your last number 

And you can chose the length of the vector it creates or the distance between each individual value


```{r}
NewData_<-expand.grid(bill_length_mm=seq(from=min(penguins_noNAs$bill_length_mm),
                                        to=max(penguins_noNAs$bill_length_mm),
                                        length.out=1000),
                     species=c("Adelie","Chinstrap","Gentoo"))
```

As the different species won't be across all of these bill length ranges 

We should also remove values outside of each species range

There would be many ways to do it, here we will use multiple dplyr functions together

This is where having the pip function helps keep the order of functions that are applied clear

First we create a df for each Species with their max and min bill lengths

Then we use case_when (a more sophisticated version of if_else()) to create a new column in our new df that either says Good or it will have NAs

We then filter all rows that have NAs in them, thus removing bill lengths outside of each species' range.

```{r}
Gentoo_Range<-penguins_noNAs %>% 
  filter(species=="Gentoo") %>% 
  summarise(min=min(bill_length_mm),
            max=max(bill_length_mm))

Adelie_Range<-penguins_noNAs %>% 
  filter(species=="Adelie") %>% 
  summarise(min=min(bill_length_mm),
            max=max(bill_length_mm))

Chinstrap_Range<-penguins_noNAs %>% 
  filter(species=="Chinstrap") %>% 
  summarise(min=min(bill_length_mm),
            max=max(bill_length_mm))


NewData_2<-NewData_ %>% 
  mutate(Range=case_when(species=="Gentoo" &
                              bill_length_mm>=Gentoo_Range$min &
                              bill_length_mm<=Gentoo_Range$max~"Good",
                         species=="Adelie" &
                           bill_length_mm>=Adelie_Range$min &
                           bill_length_mm<=Adelie_Range$max~"Good",
                         species=="Chinstrap" &
                           bill_length_mm>=Chinstrap_Range$min &
                           bill_length_mm<=Chinstrap_Range$max~"Good"
  )) %>% 
  filter(!Range%in%NA) %>% 
  select(-Range)
```

After bad range values are filtered out we use the select function to remove the "Range" column, we do this with the - operator.


```{r}
Pred_2<-predict(lm3.1,NewData_2,se.fit=TRUE)

NewData_2$response<-Pred_2$fit

NewData_2$se.fit<-Pred_2$se.fit
```

So now we have many data points that can be used to draw the linear model outputs

```{r}
#| fig.width: 8
#| fig.height: 8

ggplot()+
  geom_ribbon(data=NewData_2,mapping=aes(x=bill_length_mm,ymax=response+se.fit,
                                                 ymin=response-se.fit,fill=species),
              alpha=0.4)+
  geom_line(data=NewData_2,mapping=aes(x=bill_length_mm,y=response,colour=species),
             alpha=0.4)+
  scale_color_manual(values=c("darkcyan","darkorange","grey30"))+
  scale_fill_manual(values=c("darkcyan","darkorange","grey30"))+
  labs(x="Bill Length (mm)",y="Response Variable (Flipper Length (mm))")+
  theme_classic()
```

This looks good but lets maybe add the raw data values onto the same figure as the model outputs as before

```{r}
#| fig.width: 8
#| fig.height: 8

ggplot()+
  geom_point(data=penguins_noNAs,mapping = aes(x=bill_length_mm,
                                               y=flipper_length_mm,
                                               colour=species),
             alpha=0.4,size=0.8)+
  geom_ribbon(data=NewData_2,mapping=aes(x=bill_length_mm,ymax=response+se.fit,
                                         ymin=response-se.fit,fill=species),
              alpha=0.4)+
  geom_line(data=NewData_2,mapping=aes(x=bill_length_mm,y=response,colour=species),
            alpha=0.4)+
  scale_color_manual(values=c("darkcyan","darkorange","grey30"))+
  scale_fill_manual(values=c("darkcyan","darkorange","grey30"))+
  labs(x="Bill Length (mm)",y="Response Variable (Flipper Length (mm))")+
  theme_classic()
```






